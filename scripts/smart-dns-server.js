const dgram = require('dgram');
const dns = require('dns');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();
const server = dgram.createSocket('udp4');

// Configuration Oracle Cloud Free optimis√©e
const ORACLE_FREE_TIER = process.env.ORACLE_FREE_TIER === 'true';
const MAX_MEMORY_MB = ORACLE_FREE_TIER ? 1024 : 2048; // Limite m√©moire pour Oracle Free

console.log(`üöÄ Smart DNS Server - Mode: ${ORACLE_FREE_TIER ? 'Oracle Free Tier' : 'Standard'}`);
console.log(`üíæ Limite m√©moire: ${MAX_MEMORY_MB}MB`);

// Configuration DNS par r√©gion
const REGIONAL_DNS = {
  'nigeria': '196.216.2.1',    // MTN Nigeria - Lobbies faciles
  'taiwan': '168.95.1.1',      // CHT Taiwan - Lobbies mod√©r√©s  
  'israel': '199.203.56.1',    // Bezeq Israel - Lobbies vari√©s
  'singapore': '165.21.83.88', // SingTel - Lobbies asiatiques
  'brazil': '200.160.2.3',     // NET Brazil - Lobbies sud-am√©ricains
  'default': '8.8.8.8'         // Google DNS fallback
};

// Domaines COD/Warzone √† intercepter
const COD_DOMAINS = [
  'prod.demonware.net',
  'activision.com',
  'callofduty.com',
  'atvi-prod.net',
  'demonware.net'
];

async function handleDNSQuery(msg, rinfo) {
  try {
    console.log(`üîç Requ√™te DNS de ${rinfo.address}:${rinfo.port}`);
    
    // Parser la requ√™te DNS
    const query = parseDNSQuery(msg);
    const domain = query.name;
    
    console.log(`üìã Domaine demand√©: ${domain}`);
    
    // V√©rifier si c'est un domaine COD
    const isCODDomain = COD_DOMAINS.some(codDomain => 
      domain.includes(codDomain)
    );
    
    if (!isCODDomain) {
      // Domaine normal - utiliser DNS Google
      return forwardToGoogleDNS(msg, rinfo);
    }
    
    console.log(`üéÆ Domaine COD d√©tect√©: ${domain}`);
    
    // Chercher l'utilisateur par IP
    const user = await prisma.user.findFirst({
      where: {
        allowedIPs: {
          contains: rinfo.address
        }
      },
      include: {
        settings: true,
        subscription: true
      }
    });
    
    if (!user) {
      console.log(`‚ùå IP non autoris√©e: ${rinfo.address}`);
      return forwardToGoogleDNS(msg, rinfo);
    }
    
    if (!user.subscription || !user.subscription.isActive) {
      console.log(`‚ùå Utilisateur sans abonnement: ${user.email}`);
      return forwardToGoogleDNS(msg, rinfo);
    }
    
    const selectedRegion = user.settings?.selectedCountry || 'default';
    const targetDNS = REGIONAL_DNS[selectedRegion] || REGIONAL_DNS.default;
    
    console.log(`üåç ${user.email} ‚Üí R√©gion: ${selectedRegion} ‚Üí DNS: ${targetDNS}`);
    
    // Enregistrer l'activit√©
    await logUserActivity(user.id, domain, selectedRegion, rinfo.address);
    
    // Rediriger vers le DNS r√©gional
    return forwardToRegionalDNS(msg, rinfo, targetDNS);
    
  } catch (error) {
    console.error('‚ùå Erreur DNS Proxy:', error);
    return forwardToGoogleDNS(msg, rinfo);
  }
}

function parseDNSQuery(buffer) {
  // Parser simple pour extraire le nom de domaine
  let offset = 12; // Header DNS = 12 bytes
  let name = '';
  
  while (offset < buffer.length) {
    const len = buffer[offset];
    if (len === 0) break;
    
    offset++;
    if (name.length > 0) name += '.';
    name += buffer.toString('ascii', offset, offset + len);
    offset += len;
  }
  
  return { name };
}

function forwardToGoogleDNS(msg, rinfo) {
  const client = dgram.createSocket('udp4');
  
  client.send(msg, 53, '8.8.8.8', (err) => {
    if (err) console.error('Erreur forward Google:', err);
  });
  
  client.on('message', (response) => {
    server.send(response, rinfo.port, rinfo.address);
    client.close();
  });
}

function forwardToRegionalDNS(msg, rinfo, targetDNS) {
  const client = dgram.createSocket('udp4');
  
  console.log(`üöÄ Redirection vers ${targetDNS}`);
  
  client.send(msg, 53, targetDNS, (err) => {
    if (err) {
      console.error(`Erreur forward ${targetDNS}:`, err);
      return forwardToGoogleDNS(msg, rinfo);
    }
  });
  
  client.on('message', (response) => {
    console.log(`‚úÖ R√©ponse re√ßue de ${targetDNS}`);
    server.send(response, rinfo.port, rinfo.address);
    client.close();
  });
  
  // Timeout apr√®s 5 secondes
  setTimeout(() => {
    client.close();
    console.log(`‚è∞ Timeout pour ${targetDNS}`);
    forwardToGoogleDNS(msg, rinfo);
  }, 5000);
}

async function logUserActivity(userId, domain, region, clientIP) {
  try {
    await prisma.dNSLog.create({
      data: {
        userId,
        domain,
        region,
        clientIP,
        timestamp: new Date()
      }
    });
    console.log(`üìä Activit√© enregistr√©e: ${domain} ‚Üí ${region}`);
  } catch (error) {
    console.error('Erreur log activit√©:', error);
  }
}

// D√©marrage du serveur DNS
server.on('message', handleDNSQuery);

server.on('listening', () => {
  const address = server.address();
  console.log(`üöÄ Smart DNS Proxy d√©marr√© sur ${address.address}:${address.port}`);
  console.log('üéÆ Interception des domaines COD/Warzone activ√©e');
  console.log('üåç Redirection r√©gionale bas√©e sur les pr√©f√©rences utilisateur');
});

server.on('error', (err) => {
  console.error('‚ùå Erreur serveur DNS:', err);
  server.close();
});

// √âcouter sur le port 53 (DNS standard)
server.bind(53);

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë Arr√™t du Smart DNS Proxy...');
  server.close();
  await prisma.$disconnect();
  process.exit(0);
});