import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// üåç Configuration des r√©gions pour g√©olocalisation DNS
const REGION_MAPPING = {
  nigeria: {
    geoIP: '41.223.84.20',
    country: 'NG',
    name: 'Nigeria',
    flag: 'üá≥üá¨'
  },
  taiwan: {
    geoIP: '203.74.205.156', 
    country: 'TW',
    name: 'Taiwan',
    flag: 'üáπüáº'
  },
  morocco: {
    geoIP: '196.200.96.15',
    country: 'MA',
    name: 'Maroc', 
    flag: 'üá≤üá¶'
  },
  thailand: {
    geoIP: '103.69.194.12',
    country: 'TH',
    name: 'Tha√Ølande',
    flag: 'üáπüá≠'
  },
  kenya: {
    geoIP: '197.248.21.8',
    country: 'KE', 
    name: 'Kenya',
    flag: 'üá∞üá™'
  }
};

/**
 * üéØ POST /api/dns/update
 * 
 * Met √† jour la r√©gion DNS pour le geolocation spoofing
 * Utilis√© par le s√©lecteur de r√©gion pour changer la g√©olocalisation
 */
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.email) {
      return NextResponse.json(
        { error: 'Non authentifi√©' },
        { status: 401 }
      );
    }

    const { region } = await request.json();
    
    // Valider la r√©gion
    if (!region || !REGION_MAPPING[region as keyof typeof REGION_MAPPING]) {
      return NextResponse.json(
        { error: 'R√©gion non valide' },
        { status: 400 }
      );
    }

    // R√©cup√©rer l'utilisateur
    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
      include: { subscriptions: true }
    });

    if (!user) {
      return NextResponse.json(
        { error: 'Utilisateur non trouv√©' },
        { status: 404 }
      );
    }

    // V√©rifier l'abonnement Premium pour le geolocation spoofing
    const hasPremiumSubscription = user.subscriptions?.some(sub => sub.type === 'PREMIUM' && sub.isActive);
    if (!hasPremiumSubscription) {
      return NextResponse.json(
        { error: 'Abonnement Premium requis pour changer de r√©gion' },
        { status: 403 }
      );
    }

    // Mettre √† jour les param√®tres DNS de l'utilisateur
    const regionConfig = REGION_MAPPING[region as keyof typeof REGION_MAPPING];
    
    await prisma.user.update({
      where: { id: user.id },
      data: {
        // Stocker la r√©gion s√©lectionn√©e pour le DNS server
        selectedCountry: region,
        lastUpdated: new Date()
      }
    });

    console.log(`üéØ DNS Update: ${user.email} ‚Üí ${regionConfig.name} ${regionConfig.flag} (${regionConfig.geoIP})`);
    
    // Log pour monitoring du geolocation spoofing
    console.log(`üåç Geolocation spoofing activ√©:`, {
      user: user.email,
      region: region,
      country: regionConfig.country,
      geoIP: regionConfig.geoIP,
      timestamp: new Date().toISOString()
    });

    return NextResponse.json({
      success: true,
      region: region,
      regionName: regionConfig.name,
      country: regionConfig.country,
      geoIP: regionConfig.geoIP,
      message: `G√©olocalisation mise √† jour vers ${regionConfig.name} ${regionConfig.flag}`
    });

  } catch (error) {
    console.error('‚ùå Erreur DNS update:', error);
    
    return NextResponse.json(
      { error: 'Erreur serveur lors de la mise √† jour DNS' },
      { status: 500 }
    );
  }
}

/**
 * üîç GET /api/dns/update
 * 
 * R√©cup√®re la configuration DNS actuelle de l'utilisateur
 */
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.email) {
      return NextResponse.json(
        { error: 'Non authentifi√©' },
        { status: 401 }
      );
    }

    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
      include: { subscriptions: true }
    });

    if (!user) {
      return NextResponse.json(
        { error: 'Utilisateur non trouv√©' },
        { status: 404 }
      );
    }

    const currentRegion = user.selectedCountry || 'nigeria';
    const regionConfig = REGION_MAPPING[currentRegion as keyof typeof REGION_MAPPING];

    return NextResponse.json({
      currentRegion: currentRegion,
      regionName: regionConfig?.name || 'Nigeria',
      country: regionConfig?.country || 'NG',
      geoIP: regionConfig?.geoIP || '41.223.84.20',
      isPremium: user.subscriptions?.some(sub => sub.type === 'PREMIUM' && sub.isActive) || false,
      lastUpdated: user.lastUpdated
    });

  } catch (error) {
    console.error('‚ùå Erreur GET DNS config:', error);
    
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    );
  }
}
