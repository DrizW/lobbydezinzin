// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  role           String   @default("USER")
  subscriptions  Subscription[]
  // NextAuth fields
  name           String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
}

model Subscription {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  stripeId     String   @unique
  status       String   // "active", "canceled", "expired", etc.
  currentPeriodEnd DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Country {
  id            String   @id @default(cuid())
  name          String   @unique
  flag          String
  kdRange       String
  kdValue       Float
  description   String
  dnsPrimary    String
  dnsSecondary  String
  color         String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// NextAuth models (copi√© de la doc officielle)
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}
